// Generated by LiveScript 1.6.0
(function(){
  var recaptcha;
  recaptcha = {};
  recaptcha.v3 = new captcha({
    init: function(){
      var this$ = this;
      return new Promise(function(res, rej){
        var tag, attr, k, v;
        tag = document.createElement('script');
        tag.onload = function(){
          return grecaptcha.ready(function(){
            return res();
          });
        };
        tag.onerror = function(){
          var ref$;
          return rej((ref$ = new Error(), ref$.id = 1022, ref$.name = 'ldError', ref$));
        };
        attr = {
          type: "text/javascript",
          async: '',
          defer: '',
          src: "https://www.google.com/recaptcha/api.js?render=" + this$.config.sitekey
        };
        for (k in attr) {
          v = attr[k];
          tag.setAttribute(k, v);
        }
        return document.body.appendChild(tag);
      });
    },
    get: function(opt){
      var this$ = this;
      opt == null && (opt = {});
      if (!this.config.sitekey || (this.config.enabled != null && !this.config.enabled)) {
        return Promise.resolve();
      }
      return new Promise(function(res, rej){
        return grecaptcha.execute(this$.config.sitekey, {
          action: opt.action
        }).then(function(token){
          return {
            token: token
          };
        });
      });
    }
  });
  recaptcha.v2 = new captcha({
    init: function(){
      return new Promise(function(res, rej){
        var tag, attr, k, v;
        tag = document.createElement('script');
        attr = {
          type: "text/javascript",
          async: '',
          defer: '',
          src: "https://www.google.com/recaptcha/api.js?onload=_grecaptcha_callback"
        };
        for (k in attr) {
          v = attr[k];
          tag.setAttribute(k, v);
        }
        window._grecaptcha_callback = function(){
          return res();
        };
        return document.body.appendChild(tag);
      });
    },
    get: function(){
      var this$ = this;
      if (!this.config.sitekey || (this.config.enabled != null && !this.config.enabled)) {
        return Promise.resolve();
      }
      return new Promise(function(res, rej){
        var div, config, id;
        div = document.createElement('div');
        document.body.appendChild(div);
        config = {
          sitekey: this$.config.sitekey,
          size: "invisible",
          badge: "none",
          callback: function(token){
            return res({
              token: token
            });
          },
          "error-callback": function(it){
            return rej(new Error(it));
          },
          "expired-callback": function(){
            var ref$;
            return rej((ref$ = new Error(), ref$.name = 'ldError', ref$.id = 1013, ref$));
          }
        };
        id = grecaptcha.render(div, config, true);
        return grecaptcha.execute(id).then(function(){});
      });
    }
  });
  if (typeof window != 'undefined' && window !== null) {
    window.recaptcha = recaptcha;
  }
}).call(this);
